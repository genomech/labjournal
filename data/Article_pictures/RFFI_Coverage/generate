#!/usr/bin/python3

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import math
from scipy.stats import mannwhitneyu as mwu

def get_cmap(n, name='Pastel1'): return plt.cm.get_cmap(name, n)


Protocols = ['HQ Hi-C', 'LQ Hi-C', 'WES']

BarWidth = 0.6
CapSize = 12
cmap = get_cmap(1)
Colors = [cmap(item) for item in list(range(len(Protocols)))]
LightColors = [(item[0], item[1], item[2], 0.5) for item in Colors]
Blackie = [(0.0, 0.0, 0.0, 1.0) for item in Colors]

x = list(range(1, len(Protocols) + 1))

fig, ax = plt.subplots(1, figsize=(8,13))
plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.3)

# 1

y = [[12.14 / 6.20, 11.94 / 6.77, 10.71 / 5.88, 12.76 / 5.89, 14.98 / 8.35, 15.23 / 6.05, 12.15 / 5.93, 13.21 / 5.76], [12.94, 11.64, 12.01, 15.03, 13.94, 11.39, 11.29, 12.13], [6.87 / 0.41, 4.54 / 0.31, 14.96 / 0.45, 26.23 / 0.73, 16.42 / 0.68, 21.30 / 0.70, 17.71 / 0.64, 16.75 / 0.72, 21.45 / 0.86, 14.50 / 0.61, 280.35 / 4.73]]


ax.bar(x, height=[np.mean(yi) for yi in y], yerr=[np.std(yi) for yi in y], capsize=CapSize, width=BarWidth, tick_label=Protocols, color=Colors, edgecolor=Blackie, zorder=1)
for i in range(len(x)): ax.scatter(x[i] + np.random.random(len(y[i])) * BarWidth - BarWidth / 2, y[i], color=Blackie[i], zorder=2)
#ax[0].set_xticklabels(['' for item in Protocols])
ax.tick_params(labelsize=14)
ax.set_ylabel('Exome Enrichment, x', fontsize=14)
#ax.set_title('Reported pairs (% of total)', fontsize=16)
#fig.suptitle('This is a somewhat long figure title', fontsize=20)
#ax[0].set_ylim([60, 109])

plt.savefig(f"test.svg")

exit()

# 2

y = [samples_exoc[samples_exoc["Protocol"] == item]['cis'].to_list() for 
item in Protocols]
ax[1].bar(x, height=[np.mean(yi) for yi in y], yerr=[np.std(yi) for yi in y], capsize=CapSize, width=BarWidth, tick_label=Protocols, color=Colors, edgecolor=Blackie, zorder=1)
for i in range(len(x)): ax[1].scatter(x[i] + np.random.random(len(y[i])) * BarWidth - BarWidth / 2, y[i], color=Blackie[i], zorder=2)
ax[1].set_xticklabels(['' for item in Protocols])
ax[1].tick_params(labelsize=14)
ax[1].set_ylabel('%', fontsize=14)
ax[1].set_title('Cis interactions (% of total)', fontsize=16)
ax[1].set_ylim([20, 109])

# 3

y = [samples_exoc[samples_exoc["Protocol"] == item]['de%of_valid'].to_list() for 
item in Protocols]
ax[2].bar(x, height=[np.mean(yi) for yi in y], yerr=[np.std(yi) for yi in y], capsize=CapSize, width=BarWidth, tick_label=Protocols, color=Colors, edgecolor=Blackie, zorder=1)
for i in range(len(x)): ax[2].scatter(x[i] + np.random.random(len(y[i])) * BarWidth - BarWidth / 2, y[i], color=Blackie[i], zorder=2)
ax[2].tick_params(labelsize=14)
ax[2].set_xticklabels(['' for item in Protocols])
ax[2].set_ylabel('%', fontsize=14)
ax[2].set_title('FR excess (% of valid)', fontsize=16)
ax[2].set_ylim([20, 109])

# 4

merged = pd.merge(samples_exoc, relig, on=['Sample'], how='left')
merged['True_DE'] = merged.apply(lambda x: None if math.isnan(x['100*relig/de(merged reads)']) else (x['de%of_valid'] * (100 - x['100*relig/de(merged reads)']) / 100), axis=1)

y = [merged[merged["Protocol"] == item]['True_DE'].to_list() for 
item in Protocols]
y[-1] = [-100]
ax[3].bar(x, height=[np.mean(yi) for yi in y], yerr=[np.std(yi) for yi in y], capsize=CapSize, width=BarWidth, tick_label=Protocols, color=Colors, edgecolor=Blackie, zorder=1)
for i in range(len(x)): ax[3].scatter(x[i] + np.random.random(len(y[i])) * BarWidth - BarWidth / 2, y[i], color=Blackie[i], zorder=2)
ax[3].set_ylabel('%', fontsize=14)
ax[3].set_title('Corrected DEnds estimation (% of valid)', fontsize=16)
Protocols = [' '.join(item.split(':')) for item in Protocols]
ax[3].tick_params(labelsize=14)
ax[3].set_xticklabels(Protocols, rotation=30, fontsize=14)
ax[3].set_ylim([0, 70])
plt.setp(ax[3].xaxis.get_majorticklabels(), ha='right')

#fig.tight_layout()
plt.savefig(f"test.svg")
