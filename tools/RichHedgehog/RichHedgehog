#!/bin/python3

import pysam
from Bio import SeqIO
from Bio.Seq import Seq
import pandas
import bisect
import json

count = 0
countExome = 0

InputBAM_name = "/dev/datasets/FairWind/_results/RichHedgehog/DCSAN1-QUAR1.bam"

OutputBAM = "/dev/datasets/FairWind/_results/RichHedgehog/DCSAN1-EXOCBEL1_1-TEST10M.plus.bam"
OutputBAM_NOT = "/dev/datasets/FairWind/_results/RichHedgehog/DCSAN1-EXOCBEL1_1-TEST10M.minus.bam"

try:
	with open("/dev/datasets/FairWind/_results/RichHedgehog/Dick.json", 'rt') as f: Dick = json.load(f)
	print("# Dick loaded")
except:
	Intervals = pandas.read_csv("/dev/datasets/FairWind/_db/MedExome_hg19_500_merged.bed", sep='\t', header=None)
	Dick = {}

	for contig in list(set(Intervals[0].to_list())):
		table = Intervals[Intervals[0] == contig]
		Breakpoints = []
		Values = []
	
		for index, row in table.iterrows():
			Breakpoints += [ row[1], row[2] ]
			Values += [ False, True ]
		Values += [ False ]
	
		Dick[contig] = {"Breakpoints": Breakpoints, "Values": Values}
	
	json.dump(Dick, open("/dev/datasets/FairWind/_results/RichHedgehog/Dick.json", 'wt'))
	print("# Dick created and saved")

InputBAM = pysam.AlignmentFile(InputBAM_name, "rb") # query-sorted, yeah?

#OutputBAM = pysam.AlignmentFile(OutputBAM, "wb", template=InputBAM)
#OutputBAM_NOT = pysam.AlignmentFile(OutputBAM_NOT, "wb", template=InputBAM)

CurrentName = None
CurrentPair = []

print("# Files opened")

for read in InputBAM:
	
	
	#if count == 0: break

	if read.qname == CurrentName: CurrentPair += [(read)]
	else:
		
		IsExomed = False
		
		for member in CurrentPair:
			try:
				IsExomed = Dick[member.reference_name]["Values"][bisect.bisect(Dick[member.reference_name]["Breakpoints"], member.reference_start)]
				if IsExomed:
					countExome += 1
					count += 1
					#[OutputBAM.write(item) for item in CurrentPair]
					break
			except KeyError:
				pass
		
		if not IsExomed: count += 1
		#[OutputBAM_NOT.write(item) for item in CurrentPair]
		
		CurrentName = read.qname
		CurrentPair = [read]

print(f"File: {InputBAM}")
print(f"Total: {count}")
print(f"Exome: {countExome}")
print(f"Rate: {countExome / count}")
